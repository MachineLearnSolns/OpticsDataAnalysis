

# aberr*******
# sph******

# solve2
# modified for optmization algorithm, no spot diagram 

# declare variables

# common
rowcount = 0
rowcount = nrow(lsi)
ls <- matrix('numeric',rowcount,13)

# illumination 
beamcomp <- vector('numeric',12)
beam1 <- vector('numeric',12)
beam2 <- vector('numeric',12)
beam3 <- vector('numeric',12)
beam4 <- vector('numeric',12)


# glass 
rowcountglass = 0
rowcountglass = nrow(glassi)
glass <- matrix('numeric',rowcountglass, 15)





# abberation sph
u <- vector('numeric',rowcount)
up <- vector('numeric',rowcount)
q <- vector('numeric',rowcount)
qp <- vector('numeric',rowcount)
I <- vector('numeric',rowcount)
Ip <- vector('numeric',rowcount)
as1 <- vector('numeric',4)
a1 <- vector('numeric',100)
rms = 0

# test variables



# polar
lspol <- matrix('numeric',rowcount,13)

yp <- vector('numeric',rowcount)
nup <- vector('numeric',rowcount)
ap1 <- vector('numeric',4)
na <- vector('numeric', 3)
flp <- vector('numeric', 2*2)
polim1 <- vector('numeric', 2)
polim2 <- vector('numeric', 2)
fp = 0


# chromatic aberration

lschr <- matrix('numeric',rowcount,13)

yc <- vector('numeric',rowcount)
nuc <- vector('numeric',rowcount)
ac1 <- vector('numeric',4)
na <- vector('numeric', 3)
flc <- vector('numeric', 3*2)
chrim1 <- vector('numeric', 2)
chrim2 <- vector('numeric', 2)
fc = 0


# 3. Optmization
lso <- matrix('numeric',rowcount,13)
tol <- matrix('numeric',rowcount,13)
ao3 <- vector('numeric',4)
d <- vector('numeric',100)
x <- matrix('numeric',rowcount,13)
y <- matrix('numeric',rowcount,13)
f1 = 0
f2 = 0
df = 0
temp = 0
leap = 0
temp1 = 0
series = 0
# merit function weights
weight1 = aiiood[1,15]
weight2 = aiiood[1,16]
weight3 = aiiood[1,17]
weight4 = aiiood[1,18]
weight5 = aiiood[1,19]
weight6 = aiiood[1,20]
weight7 = aiiood[1,21]
weight8 = aiiood[1,22]


# paraxial focus
lsfopar <- matrix('numeric',rowcount,13)


# aperture stop
# calculates the effective entrance pupil diameter for further computations 
# stopsurfno is the surface number of the aperture stop. The expd is located at the final surface of the system while the epd is located at the first

# entrance pupil diameter - light matter interactions
epd = aiiood[1,4] #19
stop = 0
expd = aiiood[1,5] # 1000
raycount = 0

stopsurfno = aiiood[1,1] #2
stopsize = aiiood[1,3] #5
stopdist = aiiood[1,2] #40
objectsize = aiiood[1,6] #0*epd
objectoffset = aiiood[1,7]

#effepd <- vector('numeric',6)
# the dummest version
tryepdstore <- matrix('numeric',100,108 + 1)
trialepd = 0
tryeffepd1 = 0 
tryeffepd2 = 0 
trialeffepdstore = 0

# for referencing epd
effepduse1 = 0
effepduse2 = 0
effepduse3 = 0


# computational variables
coma = 0
astig = 0
chrome = 0
polar = 0

# iteration variables
i = 0
j = 0
k = 0
ia = 0
ja = 0
ka = 0

# photometry
field <- matrix('numeric',rowcount,7)

#solution
solution <- matrix('numeric',15,1)

# graphing
lsog <- matrix('numeric',rowcount,13) 
yog <- matrix('numeric',rowcount,13) 
xog <- matrix('numeric',rowcount,13) 
nuog <- matrix('numeric',rowcount,13) 
OptimizedSystem <- matrix('character',rowcount,16) 
PerformaceDataOptim <- vector('character',15)

#input

ls = lsi
glass = glassi

# polar
lspol = lsi

# chrome
lschr = lsi

# focus
lsfopar = lsi

# optim
tol = toli
lso = lsi

# add effepd as input from the previous algorithm

# solution
solution = solutioni

# photometry
field = lsi


for(i in 1:rowcount)
{
for(j in 1:7)
{
field[i,j] = 0
}
}

# Normalized intensity along a primary axis
field[1,1] = aiiood[13]
# Normalized intensity along an orthogonal axis
field[1,2] = aiiood[14]
# Rotation of the primary axis
field[1,3] = aiiood[23]
# Phase difference
field[1,4] = aiiood[24]
# % polarixed
field[1,5] = aiiood[25]
# Intensity
field[1,6] = aiiood[12] 
# Wavelength
field[1,7] = aiiood[11] # nm
# beer constant
beer = 1
# Electro optic Kerr Constant
EOKerr = 1*field[1,7]*(1/1000000000)
# Electro optic Pockel Constant
EOPockel = 1
# Magneto optic Kerr Constant
MOKerr = 1


# test
lso1 <- matrix('numeric',rowcount,13)
lso2 <- matrix('numeric',rowcount,13)
lso3 <- matrix('numeric',rowcount,13)
lso1 = lsi
lso2 = lsi
lso3 = lsi


# aperture stop ritual

# get effepd from previous algorithm



# more rituals

# c-p-tn function
cptn <- function(ls)
{

# c
for (i in 1:rowcount)
{
if (ls[i,1] != 0)
ls[i,7] = 1/ls[i,1]
else
ls[i,7] = 0

}

# p
for (i in 1:rowcount)
{
if (ls[i,1] != 0)
ls[i,8] = (ls[i,3] - ls[i+1,3])*ls[i,7]
}

# t/n
for (i in 1:rowcount)
{
if (ls[i,2] != 0)
ls[i,9] = ls[i,2]/ls[i,3] 
else
ls[i,9] = 0
}
return(ls)
}


abbeam <- function(ls,beamcomp,epd)
{
# algorithm begins

# maintaining r-t-n & c-p-tn relations for optimization
ls = cptn(ls)

# the loop
for(k in 1:1:3)
{
for(j in 1:1:2)
{
qp[1] = beamcomp[j]
up[1] = asin((beamcomp[j] + epd*(k/2 - 1) - epd*(k/2 - 1)*(1/1000) + epd*(1/2000))/ls[2,2] )
for(i in 2:1:(rowcount - 1))
{
u[i] = up[i - 1] + ls[i,3 + j]  
q[i] = qp[i - 1] + ls[i,2]*sin(u[i])
I[i] = asin(q[i]*ls[i,7] + sin(u[i]))
Ip[i] = asin((ls[i,3]*sin(I[i]))/ls[i + 1,3])
up[i] = Ip[i] - I[i] + u[i] 
qp[i] = q[i]*((cos(up[i]) + cos(Ip[i]))/(cos(u[i]) + cos(I[i])))
}
# the coordinate on the image plane
# beamcomp[j + 3*k] = (-1)*(sin(up[(rowcount - 1)])/qp[(rowcount - 1)])*(ls[rowcount,2] + (qp[(rowcount - 1)]/sin(up[(rowcount - 1)])))*(ls[rowcount,2])
beamcomp[j + 3*k] = (1)*(ls[rowcount,2] + qp[(rowcount - 1)]/sin(up[(rowcount - 1)]))*(sin(up[(rowcount - 1)])) #*(ls[rowcount,2])
# the angle of the beam
beamcomp[3*k + 3] = atan( -sin(up[(rowcount - 1)]) )

}
}

return(beamcomp)
# algorithm ends
}


# copied from trpol - unmodified - except for the return value

trpar <- function(epd,beamcomp,lspol)
{
fp = 0
# for both tangential & sagittal components
for(j in 1:2)
{
#boundary
yp[1] =  beamcomp[j]
# on the edge of entrance pupil 
nup[1] = (epd - beamcomp[j])/ls[2,2]

# trace
for(i in 2:(rowcount - 1))
{
yp[i] = yp[i - 1] + nup[i - 1]*lspol[i,9]
nup[i] = nup[i - 1] + lspol[i,8]*yp[i] + lspol[i,3 + j]*lspol[i,3]
}

# solve
fp = fp - (yp[(rowcount - 1)]/nup[(rowcount - 1)])
polim1[j] = (-1)*(lspol[rowcount,2]  + (yp[(rowcount - 1)]/nup

[(rowcount - 1)]))*(nup[(rowcount - 1)])
}

fp = fp/2
return(fp)
# return(polim1)
}

# copied from trpar - unmodified - except for the return value

focpar <- function(epd,beamcomp,lspol)
{
fp = 0
# for both tangential & sagittal components
for(j in 1:2)
{
#boundary
yp[1] =  beamcomp[j]
# on the edge of entrance pupil 
nup[1] = (epd - beamcomp[j])/ls[2,2]

# trace
for(i in 2:(rowcount - 1))
{
yp[i] = yp[i - 1] + nup[i - 1]*lspol[i,9]
nup[i] = nup[i - 1] + lspol[i,8]*yp[i] + lspol[i,3 + j]*lspol[i,3]
}

# solve
fp = fp - (yp[(1)]/nup[(rowcount - 1)])
polim1[j] = (-1)*(lspol[rowcount,2]  + (yp[(rowcount - 1)]/nup[(rowcount - 1)]))*(nup[(rowcount - 1)])
}

#fp = fp/2 - don't ask why
return(fp)
# return(polim1)
}


# c-p-tn-pol function
cptnpol <- function(lspol)
{


# c
for (i in 1:rowcount)
{
if (lspol[i,1] != 0)
lspol[i,7] = 1/lspol[i,1]
else
lspol[i,7] = 0

}

# p
for (i in 1:rowcount)
{
if (lspol[i,1] != 0)
lspol[i,8] = (lspol[i,3] - lspol[i+1,3])*lspol[i,7]
}


# t/n
for (i in 1:rowcount)
{
if (lspol[i,2] != 0)
lspol[i,9] = lspol[i,2]/lspol[i,3] 
else
lspol[i,9] = 0
}
return(lspol)
}


trpol <- function(epd,beamcomp,lspol)
{
fp = 0
# for both tangential & sagittal components
for(j in 1:2)
{
#boundary
yp[1] = beamcomp[j]
# on the edge of entrance pupil 
nup[1] = (epd - beamcomp[j])/ls[2,2]

# trace
for(i in 2:(rowcount - 1))
{
yp[i] = yp[i - 1] + nup[i - 1]*lspol[i,9]
nup[i] = nup[i - 1] + lspol[i,8]*yp[i] + lspol[i,3 + j]*lspol[i,3]
}

# solve
fp = fp - (yp[(rowcount - 1)]/nup[(rowcount - 1)])
polim1[j] = (-1)*(lspol[rowcount,2]  + (yp[(rowcount - 1)]/nup

[(rowcount - 1)]))*(nup[(rowcount - 1)])
}

fp = fp/2
#return(fp)
return(polim1)
}


# c-p-tn-chr function
cptnchr <- function(lschr)
{


# c
for (i in 1:rowcount)
{
if (lschr[i,1] != 0)
lschr[i,7] = 1/lschr[i,1]
else
lschr[i,7] = 0

}

# p
for (i in 1:rowcount)
{
if (lschr[i,1] != 0)
lschr[i,8] = (lschr[i,3] - lschr[i+1,3])*lschr[i,7]
}

# t/n
for (i in 1:rowcount)
{
if (lschr[i,2] != 0)
lschr[i,9] = lschr[i,2]/lschr[i,3] 
else
lschr[i,9] = 0
}
return(lschr)
}


trchr <- function(epd,beamcomp,lschr)
{

fc = 0

# for both tangential & sagittal components
for(j in 1:2)
{

#boundary
yc[1] = beamcomp[j]

# on the edge of entrance pupil 
nuc[1] = (epd - beamcomp[j])/ls[2,2]


# trace
for(i in 2:(rowcount - 1))
{
yc[i] = yc[i - 1] + nuc[i - 1]*lschr[i,9]
nuc[i] = nuc[i - 1] + lschr[i,8]*yc[i] + lschr[i,3 + j]*lschr[i,3]
}
# solve
fc = - (yc[(rowcount - 1)]/nuc[(rowcount - 1)])
chrim1[j] =   (-1)*(lschr[rowcount,2]  + (yc[(rowcount - 1)]/nuc

[(rowcount - 1)]))*(nuc[(rowcount - 1)])
}

# fc = fc/2
#return(fc)
return(chrim1)

}


# computations begin

# aberrations

# spherical 

abbrms <- function(lso)
{
rms = 0
# paraxial
beamcomp[1] = 0
beamcomp[2] = 0
for(i in 1:1:99)
{
beam1 = abbeam(lso,beamcomp,(effepd[3] - (effepd[3]*i)/100))
a1[i] = beam1[4]
rms = rms + (a1[i])^2
}
rms = sqrt(rms)*100
return(rms)
}


# coma metric for optimization - the -45045 standard
# standard is - object 1/2 the size of the entrance 

# pupil diameter, and placed at 3 # positions on the image 

# plane -45,0,45 degrees to the paraxial axis.

# The 'paraxial ray' is defined to be ray with height 0.0001% of epd and not dead center

abbcoma <- function(lso)
{
for(i in 1:3)
{
# sagittal
beamcomp[1] = (effepd[3]/4)*(i - 2) + effepd[3]/16 
beam1 = abbeam(lso,beamcomp,effepd[2*i - 1])
beamcomp[1] =  (effepd[3]/4)*(i - 2) - effepd[3]/16 
beam2 = abbeam(lso,beamcomp,effepd[2*i - 1])
mag = abs((abs(beam1[1 + 3*1]) - abs(beam2[1 + 3*1]))/(0.0625*effepd

[3]))
coma = coma + mag
# tangential
beamcomp[2] = (effepd[3]/4)*(i - 2) + effepd[3]/16 
beam1 = abbeam(lso,beamcomp,effepd[2*i - 0])
beamcomp[2] =  (effepd[3]/4)*(i - 2) - effepd[3]/16 
beam2 = abbeam(lso,beamcomp,effepd[2*i - 0])
mag = abs((abs(beam1[2 + 3*1]) - abs(beam2[2 + 3*1]))/(0.0625*effepd

[3]))
coma = coma + mag
}
coma = coma/6

# New coma - it's the magnification of rays 
# tangential
beamcomp[1] = effepd[3]/1000
beamcomp[2] =  objectsize/2 + objectoffset
beam1 = abbeam(lso,beamcomp,effepd[2])
beamcomp[1] = effepd[3]/1000
beamcomp[2] =   - objectsize/2 + objectoffset
beam2 = abbeam(lso,beamcomp,effepd[6])
mag = (abs(beam1[2 + 3*1]))/(abs(objectsize/2 + objectoffset))


beamcomp[1] = effepd[3]/1000
beamcomp[2] =  objectsize/4 + objectoffset
beam1 = abbeam(lso,beamcomp,effepd[2])
beamcomp[1] = effepd[3]/1000
beamcomp[2] =   - objectsize/2 + objectoffset
beam2 = abbeam(lso,beamcomp,effepd[6])
coma = ((abs(beam1[2 + 3*1]))/(abs(objectsize/4 + objectoffset)) - mag)*(1)



# sagittal
beamcomp[1] =  objectsize/2 + objectoffset
beamcomp[2] =  effepd[3]/1000
beam1 = abbeam(lso,beamcomp,effepd[3])
beamcomp[1] =  - objectsize/2 + objectoffset
beamcomp[2] = effepd[3]/1000
beam2 = abbeam(lso,beamcomp,effepd[1])
mag = (abs(beam1[1 + 3*1]))/(abs(objectsize/2 + objectoffset))


beamcomp[1] =  objectsize/4 + objectoffset
beamcomp[2] =  effepd[3]/1000
beam1 = abbeam(lso,beamcomp,effepd[3])
beamcomp[1] =  - objectsize/2 + objectoffset
beamcomp[2] = effepd[3]/1000
beam2 = abbeam(lso,beamcomp,effepd[1])
coma = (  (abs(beam1[1 + 3*1]))/(abs(objectsize/4 + objectoffset)) - mag)*(1)

coma = coma*(1/(atan((objectsize/2 + objectoffset)/ls[2,2]) - atan((objectsize/4 + objectoffset)/ls[2,2])))

return(coma)
}



# magnification - just like coma with i = 2

magmerid <- function(lso)
{
# tangential
beamcomp[1] = effepd[3]/1000
beamcomp[2] =  objectsize/2 + objectoffset
beam1 = abbeam(lso,beamcomp,effepd[2])
beamcomp[1] = effepd[3]/1000
beamcomp[2] =   - objectsize/2 + objectoffset
beam2 = abbeam(lso,beamcomp,effepd[6])
mag = (abs(beam1[2 + 3*1]))/(abs(objectsize/2 + objectoffset))
# sagittal
beamcomp[1] =  objectsize/2 + objectoffset
beamcomp[2] =  effepd[3]/1000
beam1 = abbeam(lso,beamcomp,effepd[3])
beamcomp[1] =  - objectsize/2 + objectoffset
beamcomp[2] = effepd[3]/1000
beam2 = abbeam(lso,beamcomp,effepd[1])
mag = (abs(beam1[1 + 3*1]))/(abs(objectsize/2 + objectoffset))


return(mag)
}


# astigmatism - paraxial
abbastig <- function(lso)
{
for(i in 1:1:2)
{
# sagittal
beamcomp[1] = 0
beam1 = abbeam(lso,beamcomp,effepd[3])
# tangential
beamcomp[2] = 0
beam2 = abbeam(lso,beamcomp,effepd[3])
astig = astig + beam1[4]/beam2[5]
}
astig = astig/2
return(astig)
}

# imaging distance - paraxial
imagedistpar <- function(lso)
{
fp = 0
lsfopar = lso
lsfopar = cptn(lsfopar)
beamcomp[1] = 0
beamcomp[2] = 0
fp = trpar(effepd[3],beamcomp,lsfopar)
return(fp)
}

# focal length - paraxial
focparedundant <- function(lso)
{
fp = 0
lsfopar = lso
lsfopar = cptn(lsfopar)
beamcomp[1] = effepd[3]
beamcomp[2] = effepd[3]
fp = focpar(effepd[3],beamcomp,lsfopar)
return(fp)
}


# polarization

meritpolar <- function(lso)
{
lspol = lso
# specifying optical properties for all surfaces
for(i in 1:1:2)
{
for(j in 1:(rowcount - 1))
{
if(lspol[j,13] != 1)
{
lspol[j,3] =  as.numeric(glass[lspol[j,13],i + 6])
# Electro Optic Effects - Pockel and Kerr		
if(i == 1)		
{		
lspol[j,3] = lspol[j,3] + (lspol[j,3]*lspol[j,3]*lspol[j,3])*( (as.numeric(glass[lspol[j,13],10]))*ls[j,10]*EOPockel   +  (as.numeric(glass[lspol[j,13],10]))*ls[j,10]*ls[j,10]*EOKerr )*(1/2)		
}
}
}

# maintaining r-t-n & c-p-tn relations for optimization
# computes p, tn (and c) with the new index n
lspol = cptnpol(lspol)


# sagittal
beamcomp[1] = objectsize/2 + objectoffset
beamcomp[2] = 0

# fl[i] = trpol(epd,beamcomp,lspol)
# ap1[i] = fl[i]
polim1 = trpol(effepd[3],beamcomp,lspol)
#flp[2*i - 1] = polim1[1]
#flp[2*i] = polim1[2]

beam1 = abbeam(lspol,beamcomp,effepd[3])
flp[2*i - 1] = beam1[4]

beamcomp[1] = - objectsize/2 + objectoffset
beamcomp[2] = 0

beam1 = abbeam(lspol,beamcomp,effepd[3])
flp[2*i] = beam1[4]

}

# ap1[3] = ap1[1] - ap1[2] 
# polar = ((sqrt((flp[1] - flp[3])^2 + (flp[2] - flp[4])^2)/lspol[rowcount,2])*100
# polar = (((flp[1] - flp[3])^2 + (flp[2] - flp[4])^2)/lspol[rowcount,2])*100
polar = (((flp[1] - flp[3])^2 + (flp[2] - flp[4])^2)/lspol[rowcount,2])*100


return(polar)
}

# chrome

abbchrm <- function(lso)
{
lschr = lso

# specifying optical properties for all surfaces

for(i in 1:1:3)
{
for(j in 1:(rowcount - 1))
{
if(lschr[j,13] != 1)
{
lschr[j,3] = as.numeric(glass[lschr[j,13],i])
}
}

# maintaining r-t-n & c-p-tn relations for optimization
# computes p, tn (and c) with the new index n
lschr = cptnchr(lschr)


# sagittal
beamcomp[1] = objectsize/2 + objectoffset
beamcomp[2] = 0
#fl[i] = trchr(epd,beamcomp,lschr)
#ac1[i] = fl[i]
chrim1 = trchr(effepd[3],beamcomp,lschr)
# flc[2*i - 1] = chrim1[1]
# flc[2*i] = chrim1[2]

beam1 = abbeam(lschr,beamcomp,effepd[3])
flc[2*i - 1] = beam1[4]

beamcomp[1] = - objectsize/2 + objectoffset
beamcomp[2] = 0

beam1 = abbeam(lschr,beamcomp,effepd[3])
flc[2*i] = beam1[4]



ac1[i] = sqrt((flc[2*i - 1])^2 + (flc[2*i])^2)

}

ac1[4] = ac1[2] - ac1[3] 
chrome   = abs(ac1[4]/ac1[2])*100


return(chrome)
}

# one more ritual - spotfire is trying act too smart while being dumb as a bucket

for(i in 1:rowcount)
{
for(j in 1:13)
{
if(tol[i,j] == '7.8')
{
tol[i,j] = 0
}
}
}



# photometry 
meritphot <- function(lso)
{
for(i in 2:(rowcount))
{
field[i,1] = field[i - 1,1]*(cos(ls[i,12] - field[i,3]))^2
field[i,2] = field[i - 1,2]*(cos(ls[i,12] - field[i,3] + (pi/2)*(as.numeric(glass[ls[i,13],8]) -  as.numeric(glass[ls[i,13],9]))*(1/(as.numeric(glass[ls[i,13],8]) -  as.numeric(glass[ls[i,13],9]) + 0.00000001)) ))^2
field[i,4] = (field[i - 1,4] + 2*pi*ls[i,2]*(as.numeric(glass[ls[i,13],8]) -  as.numeric(glass[ls[i,13],9]))*(1/field[1,7]))%%(pi)
#beer
field[i,6] = field[i - 1,6]*exp(-(ls[i,2]*as.numeric(glass[ls[i,13],13])*beer)) 
# Kerr Effect ->  magnetic field
field[i,3] = field[i - 1,3]  + as.numeric(glass[ls[i,13],12])*ls[i,11]*ls[i,2]*(1/1000)*MOKerr

}
return(field[rowcount,6]/field[1,6])
}


# begin optmization

# merit function
merit <- function(lso)
{
abs((-weight1)*abbrms(lso) + (-weight2)*abbcoma(lso) + (-weight3)*abbastig(lso)  + 

(-weight4)*abbchrm(lso) + (-weight5)*meritpolar(lso) + (-weight6)*magmerid(lso) + 

(-weight7)*focparedundant(lso) + (-weight8)*meritphot(lso))
} 


# initial temperature
x = lso

for(k in 1:1:3)
{
series = -2 + k
for(i in 1:rowcount)
{
for(j in 1:3)
{
x[i,j] = x[i,j]*(1 + (series)*tol[i,j])

}
}
temp1 = temp1 + merit(x)
}
temp1 = temp1/3

# initial config
x = lso
y = lso
temp = temp1

for(k in 1:1:2)
{
temp = temp/k

for(h in 1:1:3)
{

# variable assignment
y = lso
for(i in 1:rowcount)
{
for(j in 1:6)
{
y[i,j] = y[i,j]*(1 + (runif(1,-1,1))*tol[i,j])
}
}
# tracing the imaging distance
# no solve condition 
if(le[rowcount,2]== 847)
{
y[rowcount,2] = imagedistpar(y)
}

# improvement test
f1 = merit(x)
f2 = merit(y)
df = f2 - f1
if(df < 0)
{
x = y
}
else
{
leap = runif(1,0,1)
if (leap < exp(-df/temp))
{
x = y
}

}

}
# next temperature
}
# 

#imaging distance and no solve condition
if(le[rowcount,2]== 847)
{
x[rowcount,2] = imagedistpar(x)
}

ao3[1] = merit(lso)
ao3[2] = merit(x)


solution[14,1] = ao3[1]
solution[15,1] = ao3[2]

# graphing - for those nice diagrams you see on zemax

#lsog = lso
lsog = x
yog = lso
nuog = lso
OptimizedSystem = yog

for(i in 1:1:13)
{
for(j in 1:1:rowcount)
{
yog[j,i] = 0
nuog[j,i]= 0
xog[j,i] = 0
}
}


effepduse1 = 0
for(ia in 1:1:3)
{
for(ib in 1:1:3)
{
# epd 
effepduse1 = effepd[3]
if((ia + ib) == 2)
{
effepduse1 = effepd[1]
}
if((ia + ib) == 6)
{
effepduse1 = effepd[5]
}

beamcomp[1] = objectsize*(ia - 2)
yog[1,3*ia - 3 + ib] = beamcomp[1]
nuog[1,3*ia - 3 + ib] = ((effepduse1 - beamcomp[1])/lsog[2,2])*(ib - 2) #effepd[2*j - 2 + 1]
# lithography Special
# nuog[1,3*ia - 3 + ib] = ((epd - objectsize/2 + objectoffset)/lsog[2,2])*(ib - 2)

for(i in 2:1:rowcount)
{
yog[i,3*ia - 3 + ib] = yog[i - 1,3*ia - 3 + ib]  + nuog[i - 1,3*ia - 3 + ib]*lsog[i,9]
nuog[i,3*ia - 3 + ib] = nuog[i - 1,3*ia - 3 + ib] + lsog[i,8]*yog[i,3*ia - 3 + ib] + lsog[i,5]*lsog[i,3]
xog[i,3*ia - 3 + ib] = lsog[i,2] - lsog[i,1] + sqrt(lsog[i,1]*lsog[i,1] - yog[i,3*ia - 3 + ib]*yog[i,3*ia - 3 + ib])
}
}
}





for(i in 1:1:rowcount)
{
for(j in 1:1:6)
{
OptimizedSystem[i,j] = paste('d',as.character(lsog[i,j]), sep ="")
}
}

for(i in 1:1:rowcount)
{
for(j in 7:1:16)
{
OptimizedSystem[i,j] = paste('d',as.character(yog[i,j - 6]), sep ="")
}
}



# data 

PerformaceDataOptim[1] = paste('<tr> <td>Imaging Distance</td> <td>', '</td> </tr>' , sep = as.character(x[rowcount,2]))
PerformaceDataOptim[2] = paste('<tr> <td>RMS Spot Size</td> <td>', '</td> </tr>' , sep = as.character(abbrms(x)))
PerformaceDataOptim[3] = paste('<tr> <td>Angular Aberration</td> <td>', '</td> </tr>' , sep = as.character(abbcoma(x)))
PerformaceDataOptim[4] = paste('<tr> <td>Astigmatism</td> <td>', '</td> </tr>' , sep = as.character(abbastig(lso)))
PerformaceDataOptim[5] = paste('<tr> <td>Transverse Chromatic Abberration</td> <td>', '</td> </tr>' , sep = as.character(abbchrm(x)))
PerformaceDataOptim[6] = paste('<tr> <td>Transverse Birefringent Aberration</td> <td>', '</td> </tr>' , sep = as.character(meritpolar(x)))
PerformaceDataOptim[7] = paste('<tr> <td>Magnification</td> <td>', '</td> </tr>' , sep = as.character(magmerid(x)))
PerformaceDataOptim[8] = paste('<tr> <td>Norm. Tangential Polarization</td> <td>', '</td> </tr>' , sep = as.character(solution[8,1]))
PerformaceDataOptim[9] = paste('<tr> <td>Norm. Sagittal Polarization</td> <td>', '</td> </tr>' , sep = as.character(solution[9,1]))
PerformaceDataOptim[10] = paste('<tr> <td>Polarization Rotation</td> <td>', '</td> </tr>' , sep = as.character(solution[10,1]))
PerformaceDataOptim[11] = paste('<tr> <td>Polarization Phase Diff</td> <td>', '</td> </tr>' , sep = as.character(solution[11,1]))
PerformaceDataOptim[12] = paste('<tr> <td>Intensity</td> <td>', '</td> </tr>' , sep = as.character(meritphot(x)))
PerformaceDataOptim[13] = paste('<tr> <td>Wavelength</td> <td>', '</td> </tr>' , sep = as.character(solution[13,1]))
PerformaceDataOptim[14] = paste('<tr> <td>Initial Merit Function</td> <td>', '</td> </tr>' , sep = as.character(solution[14,1]))
PerformaceDataOptim[15] = paste('<tr> <td>Optimized Merit Function</td> <td>', '</td> </tr>' , sep = as.character(solution[15,1]))

# test

# test
